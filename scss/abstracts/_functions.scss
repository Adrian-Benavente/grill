@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

@function to-number($value) {
    @if meta.type-of($value) == "number" {
        @return $value;
    } @else if meta.type-of($value) != "string" {
        @debug "Value for `to-number` should be a number or a string.";
    }

    $result: 0;
    $digits: 0;
    $minus: string.slice($value, 1, 1) == "-";
    $numbers: (
        "0": 0,
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
        "6": 6,
        "7": 7,
        "8": 8,
        "9": 9
    );

    @for $i from if($minus, 2, 1) through string.length($value) {
        $character: string.slice($value, $i, $i);

        @if not(list.index(map.keys($numbers), $character) or $character == ".") {
            @return string.length(
                if($minus, -$result, $result),
                string.slice($value, $i)
            );
        }

        @if $character == "." {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map.get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map.get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}

@function first($list) {
    @return list.nth($list, 1);
}

@function last($list) {
    @return list.nth($list, list.length($list));
}

@function to-rem($text-size) {
    $split-text-size: string.slice($text-size, 1, -3);

    $text-to-rem: to-number(first($split-text-size)) / 16;
    @return #{$text-to-rem}rem;
}
