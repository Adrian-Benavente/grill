@use "mixins";
@use "breakpoints";

.grid {
    display: grid;
}

.inline-grid {
    display: inline-grid;
}

.grid, .inline-grid {
    @for $i from 2 through 12 {
        &.cols-#{$i} {
            grid-template-columns: repeat($i, 1fr);
        }
        &.rows-#{$i} {
            grid-template-rows: repeat($i, 1fr);
        }
        &.auto-cols-#{$i} {
            grid-auto-columns: #{$i}fr;
        }
        &.auto-rows-#{$i} {
            grid-auto-rows: #{$i}fr;
        }
        .colspan-#{$i} {
            grid-column: span #{$i};
        }
        .rowspan-#{$i} {
            grid-row: span #{$i};
        }
    }

    @each $breakpoint, $value in breakpoints.$breakpoints {
        @include mixins.screen-size($breakpoint) {
            @for $i from 2 through 12 {
                &.cols-#{$i}-#{$breakpoint} {
                    grid-template-columns: repeat($i, 1fr);
                }
                &.rows-#{$i}-#{$breakpoint} {
                    grid-template-rows: repeat($i, 1fr);
                }
                &.auto-cols-#{$i}-#{$breakpoint} {
                    grid-auto-columns: #{$i}fr;
                }
                &.auto-rows-#{$i}-#{$breakpoint} {
                    grid-auto-rows: #{$i}fr;
                }
                .colspan-#{$i}-#{$breakpoint} {
                    grid-column: span #{$i};
                }
                .rowspan-#{$i}-#{$breakpoint} {
                    grid-row: span #{$i};
                }
            }
        }
    }

    @for $i from 1 through 5 {
        @for $j from 1 through 5 {
            @if $i != $j {
                &.gap-#{$i}-#{$j} {
                    grid-gap: #{$i}rem #{$j}rem;
                    gap: #{$i}rem #{$j}rem;
                }
            }
        }
        &.gap-#{$i} {
            grid-gap: #{$i}rem;
            gap: #{$i}rem;
        }
    }

    @each $prop-value in (column, row, dense) {
        &.auto-flow-#{$prop-value} {
            grid-auto-flow: $prop-value;
        }
    }

    @each $prop-value in (start, center, end, space-around, space-between, space-evenly) {
        &.align-content-#{$prop-value} {
            align-content: $prop-value;
        }
        &.justify-content-#{$prop-value} {
            justify-content: $prop-value;
        }
        &.place-content-#{$prop-value} {
            place-content: $prop-value;
        }
    }

    @each $prop-value in (start, center, end) {
        &.align-items-#{$prop-value} {
            align-items: $prop-value;
        }
        &.justify-items-#{$prop-value} {
            justify-items: $prop-value;
        }
        &.place-items-#{$prop-value} {
            place-items: $prop-value;
        }
    }

    @each $prop-value in (start, center, end) {
        .align-self-#{$prop-value} {
            align-self: $prop-value;
        }
        .justify-self-#{$prop-value} {
            justify-self: $prop-value;
        }
        .place-self-#{$prop-value} {
            place-self: $prop-value;
        }
    }

    .subgrid {
        display: grid;
        grid-template-columns: subgrid;
        grid-template-rows: subgrid;
    }

    .subgrid-cols {
        display: grid;
        grid-template-columns: subgrid;
    }

    .subgrid-rows {
        display: grid;
        grid-template-rows: subgrid;
    }
}


